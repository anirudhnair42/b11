// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Company {
  id               String                 @id @default(uuid())
  name             String
  createdAt        DateTime               @default(now())
  updatedAt        DateTime               @updatedAt
  UserContributors UserContributors[]
  industryId       String
  industry         Industry               @relation(fields: [industryId], references: [id])
  website          String
  description      String?
  logo             String?
  locationId       String
  location         Location               @relation(fields: [locationId], references: [id])
  businessModel    CompanyBusinessModel[]
  comments         Comments[]
  founders         Founder[]
  MetricSnapshot   MetricSnapshot[]

  @@index([industryId])
  @@index([locationId])
}

enum Role {
  READ
  WRITE
  ADMIN
}

enum MetricType {
  NUMBER
  STRING
  DATETIME
}

model User {
  id               String             @id @default(uuid())
  email            String             @unique
  password         String
  firstName        String
  lastName         String
  permissions      Role               @default(READ)
  companyId        Int?
  userContributors UserContributors[]
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  comments         Comments[]
}

model UserContributors {
  company       Company  @relation(fields: [companyId], references: [id])
  companyId     String
  user          User     @relation(fields: [userId], references: [id])
  userId        String
  contributedAt DateTime @default(now())
  author        Boolean  @default(false)

  @@id([companyId, userId])
  @@index([companyId])
  @@index([userId])
}

model Industry {
  id        String    @id @default(uuid())
  name      String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  companies Company[]
}

//benefit of normalization include ability to add data like tax informaiton, etc
model Location {
  id        String    @id @default(uuid())
  name      String
  state     String
  country   String
  pincode   String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  companies Company[]
}

model BussinessModel {
  id        String                 @id @default(uuid())
  name      String
  createdAt DateTime               @default(now())
  updatedAt DateTime               @updatedAt
  companies CompanyBusinessModel[]
}

model CompanyBusinessModel {
  company         Company        @relation(fields: [companyId], references: [id])
  companyId       String
  businessModel   BussinessModel @relation(fields: [businessModelId], references: [id])
  businessModelId String
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt

  @@id([companyId, businessModelId])
  @@index([companyId])
  @@index([businessModelId])
}

model Comments {
  id        Int      @id @default(autoincrement())
  comment   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  company   Company? @relation(fields: [companyId], references: [id])
  companyId String?
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  founder   Founder? @relation(fields: [founderId], references: [id])
  founderId String?

  @@index([companyId])
  @@index([userId])
  @@index([founderId])
}

model Founder {
  id         String     @id @default(uuid())
  name       String
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  company    Company    @relation(fields: [companyId], references: [id])
  companyId  String
  contact    String?
  Linkedin   String?
  email      String?
  twitter    String?
  website    String?
  comments   Comments[]
  crunchbase String?

  @@index([companyId])
}

model Metric {
  id          String           @id @default(uuid())
  name        String
  type        MetricType
  description String?
  annualized  Boolean          @default(false)
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  snapshots   MetricSnapshot[]
}

model MetricSnapshot {
  id            String    @id @default(uuid())
  value         Float
  stringValue   String?
  dateTimeValue DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  capturedAt    DateTime
  metric        Metric    @relation(fields: [metricId], references: [id])
  metricId      String
  company       Company   @relation(fields: [companyId], references: [id])
  companyId     String

  @@index([metricId])
  @@index([companyId])
}
